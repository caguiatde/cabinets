var express = require('express');
var router = express.Router();
var http = require('http');
var fs = require('fs');
var app     = express();
var path    = require("path");
var form_functions = require('../form_functions.js');
var async=require('async');

var fractions=[ '', '1/16', '1/8','3/16','1/4', '5/16', '3/8', '7/16','1/2', '9/16', '5/8', '11/16','3/4','13/16', '7/8', '15/16'];
var inches = [ '', '1','2','3','4','5','6','7','8','9','10','11'];
var feet = ['', '1', '2', '3', '4', '5'];

var mongojs = require('mongojs');
var databaseUrl="tvstanddb";
var collections=["standDims", "plyParts", "hardParts"];
var db = mongojs(databaseUrl, collections);
var ObjectId = mongojs.ObjectId;


calcAndArray=function(ow, oh, od, ffbw,ssw,scw,dbw){

var ct=0.75;
var co=1.0;

//Face Frame Vars:
   // Face Frame Width:
var ffw=ow-2.0*co;
   // Face Frame Height:
var ffh=oh-ct;
   // Face Frame Stile Length:
var ffsl=ffh;
   //Face Frame Rail Length:
var ffrl=ffw-2.0*ffbw;
   // Face Frame Baseboard Height:
var ffbbh=3.25;
   //Face Frame Vertical Divider Length:
var ffvdl=ffh-2.0*ffbw-ffbbh+0.5;

//Door Dimension Vars:
   //Door Recess:
var drec=0.375;
   //Door Stile Lengths:
var dsl=ffvdl;
  //Door Rail Lengths:
var drl=ssw-2.0*dbw+2.0*drec;
  //Door Center Panel Width:
var dcpw=drl;
  //Door Center Panel Length:
var dcpl=dsl-2.0*dbw-2*drec;

//Box Parts:
 //Box Part Plywood Thickness:
var bppt=0.75;
  //Box Part Side Width:
var bpsw=od-co-0.75;
  //Box Part Side Length:
var bpsl=ffh;
  //Box Part Bottom Width:
var bpbw=bpsw;
  //Box Part Bottom Length:
var bpbl=ow-2.0*co-0.5-0.75;
  //Box Part Divider Width:
var bpdw=bpsw-0.75;
  //Box Part Divider Length:
var bpdl=ffvdl+ffbw+0.125;
  //Box Part Back Brace Length:
var bpbbl=bpbl-0.75;
  //Box Part Back Brace Width:
var bpbbw=4.0;

//Countertop Vars:
  //Counter Width:
var cw=od-0.75;
  //Counter Length:
var cl=ow-2.0*0.75;
  //Hardwood Wrap Width:
var chww=1.0;
  //Hardwood Wrap Thickness:
var chwt=0.75;
  //Hardwood Wrap Length:
var chwl=ow+2.0*od;

//Shelf Vars:
  //Center Shelf Width:
var csfw=scw+0.75-0.125;
  //Side Shelf Width:
var ssfw=ssw+0.5+0.375-0.125;
  //Shelf Length:
var sfl=bpsw-0.5;
  //Hardwood Shelf Wrap Width:
var hsww=1.0;
  //Hardwood Shelf Wrap Thickness:
var hswt=0.75;
  //Hardwood Shelf Wrap Length:
var hswl=csfw*2.0+ssfw*4.0;

var allDims=
{
overallWidth: ow,
overallHeight: oh,
overallDepth: od,
faceFrameWidth: ffw,
faceFrameHeight: ffh,
faceFrameBoardWidth: ffbw,
faceFrameStileLength: ffsl,
faceFrameRailLength: ffrl,
faceFrameBaseboardHeight: ffbbh,
faceFrameVerticalDividerLength: ffvdl,
sectionSideWidths: ssw,
sectionCenterWidth: scw,
doorRecess: drec,
doorStileLengths: dsl,
doorBoardWidth: dbw,
doorRailLength: drl,
doorCenterPanelWidth: dcpw,
doorCenterPanelLength: dcpl,
boxPartPlywoodThickness: bppt,
boxPartSideWidth: bpsw,
boxPartSideLength: bpsl,
boxPartBottomWidth: bpbw,
boxPartBottomLength: bpbl,
boxPartDividerWidth: bpdw,
boxPartDividerLength: bpdl,
boxPartBackBraceLength: bpbbl,
boxPartBackBraceWidth: bpbbw,
counterWidth: cw,
counterLength: cl,
counterHardwoodWrapWidth: chww,
counterHardwoodWrapThickness: chwt,
counterHardwoodWrapLength: chwl,
centerShelfWidth: csfw,
sideShelfWidth: ssfw,
shelfLength: sfl,
hardwoodShelfWrapWidth: hsww,
hardwoodShelfWrapThickness: hswt,
hardwoodShelfWrapLength: hswl
}
return allDims;
};

function calcPlyParts(objID){
async.waterfall([
  function(callback){
 //get data from mongo
  db.standDims.findOne({_id: mongojs.ObjectId(objID)}, function(err, doc){
   if(err){console.log(err);   }
   else
  {
   console.log('Stupid Data Acquired with', doc);
   callback(null,doc);
   }
   });
},
function(doc, callback){
var plyDims=
{

sideWidth: doc.boxPartSideWidth,
sideQty:   '2',
sideLength: doc.boxPartSideLength,
sideThickness: '0.75',
bottomWidth: doc.boxPartBottomWidth,
bottomQty:   '1',
bottomLength: doc.boxPartBottomLength,
bottomThickness: '0.75',
dividerWidth: doc.boxPartDividerWidth,
dividerLength: doc.boxPartDividerLength,
dividerThickness: '0.75',
dividerQty: '2',
countertopWidth: doc.counterWidth,
countertopLength: doc.counterLength,
countertopThickness: '0.75',
countertopQty: '1',
backBraceWidth: doc.boxPartBackBraceWidth,
backBraceLength: doc.boxPartBackBraceLength,
backBraceThickness: '0.75',
backBraceQty: '1',
centerShelfWidth: doc.centerShelfWidth,
centerShelfLength: doc.shelfLength,
centerShelfThickness: 0.75,
centerShelfQty: '2',
sideShelfWidth: doc.sideShelfWidth,
sideShelfLength: doc.shelfLength,
sideShelfThickness: '0.75',
sideShelfQty: '4',
doorPanelWidth: doc.doorCenterPanelWidth,
doorPanelLength: doc.doorCenterPanelLength,
doorPanelThickness: '0.75',
doorPanelQty: '2'
};
console.log('plyDims',plyDims);
callback(null, plyDims);
},
function(plyDims,callback){
//save the data
db.plyParts.save(plyDims,function(err,saved){
if(err || !saved){console.log("save error");}
else
{
   console.log('ply data saved OK with id ', plyDims._id);
}
});

],
function (error) {
    if (error) {
         return null;
    }
})

};

router.post('/genparts', function(req, res){
var idd=req.body.idd;
plyDims=calcPlyParts(idd);
 //get the single data entry back
var plyEntry=db.plyParts.findOne({_id: mongojs.ObjectId(plyDims._id)}, function(err, doc){
  if(err){console.log(err);   }
  else
     {
       res.render('plyhard',{idd: doc});
     }
   });
}
});

});



router.post('/tvstand/add', function(req, res){

var ow=convertToDecimal(req.body.overall_width_foot, req.body.overall_width_inch, req.body.overall_width_fract);
var oh=convertToDecimal(req.body.overall_height_foot, req.body.overall_height_inch, req.body.overall_height_fract);
var od=convertToDecimal(req.body.overall_depth_foot, req.body.overall_depth_inch, req.body.overall_depth_fract);
var ffbw=convertToDecimal(req.body.face_frame_board_width_foot, req.body.face_frame_board_width_inch, req.body.face_frame_board_width_fract);
var ssw=convertToDecimal(req.body.section_side_widths_foot, req.body.section_side_widths_inch, req.body.section_side_widths_fract);
var scw=convertToDecimal(req.body.section_center_width_foot, req.body.section_center_width_inch, req.body.section_center_width_fract);
var dbw=convertToDecimal(req.body.door_board_width_foot, req.body.door_board_width_inch, req.body.door_board_width_fract);

var allDims=calcAndArray(ow,oh, od, ffbw,ssw, scw, dbw);

//save the data
db.standDims.save(allDims,function(err,saved){
if(err || !saved){console.log("save error");}
else{console.log('data saved OK with id ', allDims._id);

//get the single data entry back
db.standDims.findOne({_id: mongojs.ObjectId(allDims._id)}, function(err, doc){
if(err){console.log(err);   }
else{console.log('Overall Width is',doc.overallWidth.toString());

res.render('show',{idd: doc});
fs.writeFile('public/current.json', JSON.stringify(doc), function (err) {
  if (err) return console.log(err);
  console.log('Doc > current.json');
});
}
});


}
});



});







/*
router.post('/tvstand/add', function(req, res){

var ow=convertToDecimal(req.body.overall_width_foot, req.body.overall_width_inch, req.body.overall_width_fract);
var oh=convertToDecimal(req.body.overall_height_foot, req.body.overall_height_inch, req.body.overall_height_fract);
var od=convertToDecimal(req.body.overall_depth_foot, req.body.overall_depth_inch, req.body.overall_depth_fract);
var ffbw=convertToDecimal(req.body.face_frame_board_width_foot, req.body.face_frame_board_width_inch, req.body.face_frame_board_width_fract);
var ssw=convertToDecimal(req.body.section_side_widths_foot, req.body.section_side_widths_inch, req.body.section_side_widths_fract);
var scw=convertToDecimal(req.body.section_center_width_foot, req.body.section_center_width_inch, req.body.section_center_width_fract);
var dbw=convertToDecimal(req.body.door_board_width_foot, req.body.door_board_width_inch, req.body.door_board_width_fract);

var allDims=calcAndArray(ow,oh, od, ffbw,ssw, scw, dbw);
var theDoc=[];
async.waterfall(
[
//save the data

function(callback){
db.standDims.save(allDims,function(err,saved){
if(err || !saved){console.log("save error");}
else{console.log('data saved OK with id ', allDims._id);}
});
},

//get the single data entry back
function(callback){

db.standDims.findOne({_id: mongojs.ObjectId(allDims._id)}, function(err, doc){
if(err){console.log(err);   }
else{console.log('Overall Width is',doc.overall_width.toString());
theDoc=doc;
}
});
},

//render the page
function(callback){

res.render('show',{idd: theDoc});

}
],    
    // the bonus final callback function
    function(err, status) {
        console.log(status);
    }

);
});

*/







router.get('/tvstand/dbentries', function(req,res){
// find everything
var idd= 'idd';
db.userDefined.find(function (err, docs) {
if(err){
console.log(err);
}
console.log(docs);
//res.render('indb.ejs',{
//title: 'User Defined TV Stands', dims: docs, idd:idd
res.render('show',{idd:idd
})
});
});



router.get('/tv_submit',function(req, res){

form_functions.displayTV(res);
});


convertToDecimal = function(ft, inch, frac){
var footDec=0;
var inchDec=0;
var fractDec=0;
switch(ft) {
    case '1':
        footDec=12;
        break;
    case '2':
        footDec=24;
        break;
     case '3':
        footDec=36;
        break;
     case '4':
        footDec=48;
        break;
     case '5':
        footDec=60;
        break;

    default:
        break;
}
switch(inch) {
    case '1':
        inchDec=1;
        break;
    case '2':
        inchDec=2;
        break;
     case '3':
        inchDec=3;
        break;
     case '4':
        inchDec=4;
        break;
     case '5':
        inchDec=5;
        break;
      case '6':
        inchDec=6;
        break;
       case' 7':
        inchDec=7;
        break;
       case '8':
         inchDec=8;
        break;
       case '9':
         inchDec=9;
        break;
        case '10':
         inchDec=10;
        break;
	 case '11':
         inchDec=11;
        break;
       default:
        break;
}

switch(frac)
{

  case('1/16'):
    fractDec=0.0625;
    break;
   case('1/8'):
    fractDec=0.125;
    break;
   case('3/16'):
    fractDec=0.1875;
    break;
   case('1/4'):
   fractDec=0.25;
    break;
   case('5/16'):
   fractDec=0.3125;
    break;
   case('3/8'):
   fractDec=0.375;
    break;
   case('7/16'):
   fractDec=0.4375;
    break;
   case('1/2'):
   fractDec=0.5;
    break;
   case('9/16'):
   fractDec=0.5625;
    break;
   case('5/8'):
   fractDec=0.625;
    break;
   case('11/16'):
   fractDec=0.6875;
    break;
   case('3/4'):
   fractDec=0.75;
    break;
   case('13/16'):
   fractDec=0.8125;
    break;
   case('7/8'):
   fractDec=0.875;
    break;
   case('15/16'):
   fractDec=0.9375;
    break;

   default:
    break;
}
 
var totalDec=footDec+inchDec+fractDec;
 return totalDec;

}
router.get('/',function(req, res, err){
if(err){
console.log(err);
}
res.render('index',{
title: 'TV Stand Form', fractions:fractions, inches:inches, feet:feet
})
});



function processThisBitch(req, res){
//res.writeHead(200);
  //res.end("hello world\n");
//res.send({ status: 'SUCCESS' });
res.write("Width: " +  req.body.overall_width_fract);
res.write("Height: "+ req.body.overall_height_fract);
res.write("Length: "+ req.body.overall_length_fract);

res.end();

};



router.post('/tv_submit',function(req, res){
form_functions.processTV(req, res);
processThisBitch(req, res);;
});











function draw (arrXpos, arrYpos, arrWidth, arrHeight, arrColors) {

console.log("definitely running draw");
var Canvas = require('canvas'),
      Image = Canvas.Image,
      canvas = new Canvas(500, 500),
      ctx = canvas.getContext('2d');

for (var i = 0; i < arrWidth.length; i++) {
ctx.fillStyle=arrColors[i];
ctx.fillRect(arrXpos[i],arrYpos[i],arrWidth[i], arrHeight[i]);
//ctx.save();
}


return canvas;

};


function parseTheJSON(jsonFilePath){

var fs = require('fs');
var jsonArr = JSON.parse(fs.readFileSync(jsonFilePath, 'utf8'));

return jsonArr


};


router.get('/show', function (req, res, next) {
jsonIt=parseTheJSON('./table.json');
arrWidth=[];
arrHeight=[];
arrXpos=[];
arrYpos=[];
arrColors=["#FF0000", "#00FF00", "#0000FF"];

for (var i=0; i<3; i++){
arrWidth[i]=jsonIt[i].width;
arrHeight[i]=jsonIt[i].height;
arrXpos[i]=jsonIt[i].rhc_x;
arrYpos[i]=jsonIt[i].rhc_y;
}
  res.setHeader('Content-Type', 'image/png');
  draw(arrXpos, arrYpos, arrWidth, arrHeight, arrColors).pngStream().pipe(res);
});

router.get('/testdata', function (req, res, next) {
  getData();
  jsonIt=parseTheJSON('./table.json');
  console.log(jsonIt);
  arrWidth=jsonIt.width;
console.log('in the get, width is ', arrWidth);
});

router.get('/form', function (req, res, next) {
res.send('./views');
});



function draw3() {
  var Canvas = require('canvas'),
      Image = Canvas.Image,
      canvas = new Canvas(200, 200),
      ctx = canvas.getContext('2d');

  ctx.font = '30px Impact';
  ctx.rotate(0.1);
  ctx.fillText('Awesome!', 50, 100);

  return canvas;
}

function draw2() {
console.log("running draw2");
  var Canvas = require('canvas'),
      Image = Canvas.Image,
      canvas = new Canvas(200, 200),
      ctx = canvas.getContext('2d');

  ctx.font = '30px Impact';
  ctx.rotate(0.1);
  ctx.fillText('Awesome!', 50, 100);
};




function getData(){
var con = getCon();


con.query('SELECT * FROM plypart',function(err, rows, fields){

	        if(err){
	         throw err;
               }
        else {

     fs.writeFile('table.json', JSON.stringify(rows), function (err) {
      if (err) throw err;
      console.log('Saved!');
    });
}

});


con.end();

};


function getCon(){


var mysql = require('mysql');

var con = mysql.createConnection({
  host: "localhost",
  user: "root",
  password: "danny1",
 database: "cabdb"
});

con.connect(function(err){
  if(err){
    console.log('Error connecting to Db');
    return;
  }
  console.log('Connection established');

});


//con.end(function(err) {
 //console.log("Connection closed!");  
// The connection is terminated gracefully
  // Ensures all previously enqueued queries are still
  // before sending a COM_QUIT packet to the MySQL server.
//});
return con;

  };



//router.get('/',function(req, res){

//res.render('index', {title: 'I Love Kerri Lynn Caguiat!', age: '45', startX: 100, startY: 100, deltaX: 250, deltaY: 150
//})});

 router.get('/test',function(req, res){

form_functions.displayForm(res);
});

router.get('/db',function(req, res){
getRows();
});





router.post('/test',function(req, res){
form_functions.processIndivForm(req, res);
processThisBitch(req, res);;
});


module.exports = router;

